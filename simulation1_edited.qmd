---
title: "Simulation with the Smallest Lambda for IpaB IgG"
format: 
  html:
    number-sections: true
    number-depth: 2
    number-offset: [0, 0]
  pdf:
    number-sections: true
    number-depth: 2
    number-offset: [0, 0]
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE,echo=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
```

```{r, echo=FALSE, message=FALSE}
library(future.apply)
library(future)
library(gridExtra)
library(mgcv) # For advanced GAM smoothing
library(haven)
library(knitr)
library(plotly)
library(kableExtra)
library(tidyr)
library(arsenal)
library(dplyr)
library(forcats)
library(huxtable)
library(magrittr)
library(parameters)
library(kableExtra)
library(ggplot2)
library(ggeasy)
library(scales)
library(plotly)
library(patchwork)
library(tidyverse)
library(gtsummary)
library(readxl)
library(purrr)
library(serocalculator)
library(serodynamics)
library(runjags)
library(coda)
library(ggmcmc)
library(here)
library(bayesplot)
library(table1)
library(tibble)
library(furrr)
library(dplyr)
devtools::load_all()
```

# Vary simulation lambdas across the range in the real cross-sectional data

## 1. Estimate the shigella incidence rate using the real cross-sectional Shigella data,

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
##    separately for each geographic region in the data.

# load shigella data
df <- read_excel("3.8.2024 Compiled Shigella datav2.xlsx",
                 sheet = "Compiled"
)
```

```{r}
df_xs_strat <- 
  df |> 
  rename(antigen_iso = isotype_name,
         Country = site_name) |> 
  filter(Country != "Dhaka") |> 
  as_pop_data(
    antigen_isos = "IgG",
    value = "n_ipab_MFI",
    age = "age",
    id = "sid"
  )
  
```

## Estimate parameters from longitudinal data

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
# Define a function to filter and manipulate Shigella data

dL_clean <- process_shigella_data(
  data = df, 
  study_filter = "SOSAR", 
  antigen = n_ipab_MFI
) |> 
  as_case_data(
    id_var = "index_id",
    biomarker_var = "antigen_iso",
    time_in_days = "timeindays",
    value_var = "result"
  )

# prepare data for modeline
# Create 5 different longdata
longdata <- prep_data(dL_clean)

```

```{r}
#| label: run-jags
priors <- prep_priors(max_antigens = longdata$n_antigen_isos)
nchains <- 4
# nr of MC chains to run simultaneously
nadapt <- 1000
# nr of iterations for adaptation
nburnin <- 100
# nr of iterations to use for burn-in
nmc <- 100
# nr of samples in posterior chains
niter <- 200
# nr of iterations for posterior sample
nthin <- round(niter / nmc)
# thinning needed to produce nmc from niter

tomonitor <- c("y0", "y1", "t1", "alpha", "shape")
# This handles the seed to reproduce the results
initsfunction <- function(chain) {
  stopifnot(chain %in% (1:4)) # max 4 chains allowed...
  .RNG.seed <- (1:4)[chain]
  .RNG.name <- c(
    "base::Wichmann-Hill", "base::Marsaglia-Multicarry",
    "base::Super-Duper", "base::Mersenne-Twister"
  )[chain]
  return(list(".RNG.seed" = .RNG.seed, ".RNG.name" = .RNG.name))
}

file.mod <- here::here("inst", "extdata", "model.jags.r")

set.seed(11325)
jags.post <- run.jags(
  model = file.mod,
  data = c(longdata, priors),
  inits = initsfunction,
  method = "parallel",
  adapt = nadapt,
  burnin = nburnin,
  thin = nthin,
  sample = nmc,
  n.chains = nchains,
  monitor = tomonitor,
  summarise = FALSE
)

curve_params_shigella <- postprocess_jags_output(jags.post)
```

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
## Set noise

noise_df_USA <- create_noise_df("MA USA")
noise_df_Niger <- create_noise_df("Niger")
noise_df_Sierra <- create_noise_df("Sierra Leone")
noise_df_Ghana <- create_noise_df("Ghana")
noise_df_strat <- 
  bind_rows(noise_df_USA,
            noise_df_Niger,
            noise_df_Sierra,
            noise_df_Ghana) |> 
  serocalculator::as_noise_params()
```

## 2. Run simulations using:

```{r,echo=FALSE, message=FALSE, warning=FALSE}

#| label: tbl-ests-strat
#| tbl-cap: "Stratified estimates of shigella"

ests_strat <- est.incidence.by(
  pop_data = df_xs_strat,
  curve_param = curve_params_shigella,
  noise_params = noise_df_strat,
  strata = "Country",
  noise_strata_varnames = "Country",
  curve_strata_varnames = NULL,
  antigen_isos = "IgG",
  num_cores = 1,
  verbose = TRUE
)

incidence_summary <- summary(ests_strat)

```

```{r}

# 1) The median of the incidence rate estimates from step 1.
# Get incidence rate estimates from each region (4 regions) and do median
med_ipab_IgG <- median(incidence_summary$incidence.rate)
med_ipab_IgG
# 1.188

# 2) 2x the maximum incidence rate estimate from step 1
# Get incidence rate estimates from each region (4 regions) and get the maximum one and 2x
max2_ipab_IgG <- 2 * max(incidence_summary$incidence.rate)
max2_ipab_IgG
# 2.788

# 3) 1/2 the minimum incidence rate from step 1
# Get incidence rate estimates from each region (4 regions) and get the minimum one and 1/2
min_half_ipab_IgG <- 0.5 * min(incidence_summary$incidence.rate)
min_half_ipab_IgG
# 0.185
```

These three values are preliminary observations of lambda from ipab_IgG.

We choose a lambda that is half of the minimum lambda from the four regions.

# Simulation (200 times) with the smallest lambda

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}
# Run the optimized simulations with n_sim = 200
set.seed(206251)

results_100_1 <- simulate_seroincidence(
  dmcmc = curve_params_shigella,
  nrep = 100, n_sim = 200,
  observed = min_half_ipab_IgG, 
  range = c(0, 2),
  batch_size = 40
  
)
```

```{r}

results_100_2 <- simulate_seroincidence(
  dmcmc = curve_params_shigella,
  nrep = 100, 
  n_sim = 200,
  observed = min_half_ipab_IgG, 
  range = c(2, 5),
  batch_size = 40
)

results_200_1 <- simulate_seroincidence(
  dmcmc = curve_params_shigella,
  nrep = 200, 
  n_sim = 200,
  observed = min_half_ipab_IgG, 
  range = c(0, 2),
  batch_size = 40
)

results_200_2 <- simulate_seroincidence(
  dmcmc = curve_params_shigella,
  nrep = 200, 
  n_sim = 200,
  observed = min_half_ipab_IgG, 
  range = c(2, 5),
  batch_size = 40
)

results_300_1 <- simulate_seroincidence(
  dmcmc = curve_params_shigella,
  nrep = 300, 
  n_sim = 200,
  observed = min_half_ipab_IgG, range = c(0, 2),
  batch_size = 40
)

results_300_2 <- simulate_seroincidence(
  dmcmc = curve_params_shigella,
  nrep = 300, 
  n_sim = 200,
  observed = min_half_ipab_IgG, range = c(2, 5),
  batch_size = 40
)

results_400_1 <- simulate_seroincidence(
  dmcmc = curve_params_shigella,
  nrep = 400, 
  n_sim = 200,
  observed = min_half_ipab_IgG, range = c(0, 2),
  batch_size = 40
)

results_400_2 <- simulate_seroincidence(
  dmcmc = curve_params_shigella,
  nrep = 400, 
  n_sim = 200,
  observed = min_half_ipab_IgG, 
  range = c(2, 5),
  batch_size = 40
)

# Stop parallel processing to free memory
plan(sequential)
```

## Store each sample size in table

```{r,echo=FALSE, message=FALSE, warning=FALSE,results='hide'}

# Example usage for different sample sizes
final_table_100_1 <- generate_final_table(results_100_1, 100)
final_table_100_2 <- generate_final_table(results_100_2, 100)

final_table_200_1 <- generate_final_table(results_200_1, 200)
final_table_200_2 <- generate_final_table(results_200_2, 200)

final_table_300_1 <- generate_final_table(results_300_1, 300)
final_table_300_2 <- generate_final_table(results_300_2, 300)

final_table_400_1 <- generate_final_table(results_400_1, 400)
final_table_400_2 <- generate_final_table(results_400_2, 400)
```

## Graphs of where the x axis is the sample size and the y axis is the empirical standard error

Set the preliminary observed lambda as half of the minimum incidence rate from the four regions.

```{r,echo=FALSE, message=FALSE, warning=FALSE}
# Function to calculate metrics for each table
calculate_metrics <- function(data, sample_size) {
  empirical_se <- sd(data$incidence.rate)
  
  
  # Return a data frame with results
  data.frame(
    sample_size = sample_size,
    empirical_se = empirical_se
  )
}

# Apply the function to each table
metrics_100_1 <- calculate_metrics(final_table_100_1, 100)
metrics_100_2 <- calculate_metrics(final_table_100_2, 100)

metrics_200_1 <- calculate_metrics(final_table_200_1, 200)
metrics_200_2 <- calculate_metrics(final_table_200_2, 200)

metrics_300_1 <- calculate_metrics(final_table_300_1, 300)
metrics_300_2 <- calculate_metrics(final_table_300_2, 300)

metrics_400_1 <- calculate_metrics(final_table_400_1, 400)
metrics_400_2 <- calculate_metrics(final_table_400_2, 400)


# Combine the results into a single summary table
summary_metrics_1 <- bind_rows(
  metrics_100_1, metrics_200_1, metrics_300_1,
  metrics_400_1
)


summary_metrics_2 <- bind_rows(
  metrics_100_2, metrics_200_2, metrics_300_2,
  metrics_400_2
)

# Add a column to distinguish the datasets
summary_metrics_1 <- summary_metrics_1 %>%
  mutate(Age_Group = "Age 0-2")

summary_metrics_2 <- summary_metrics_2 %>%
  mutate(Age_Group = "Age 2-5")

# Combine both datasets into one
summary_metrics_combined <- bind_rows(summary_metrics_1, summary_metrics_2)

# Plot with color to differentiate age groups
summary_metrics_combined |> 
  plot_summary_metrics()
```

## Table

```{r,echo=FALSE, message=FALSE, warning=FALSE}
summary_metrics_combined %>%
  kable()
```
